@model GSA_Management_Information_System.Models.StockRecieveInformation

@{
    ViewBag.Title = "Edit";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.js"></script>

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Stock Recieve Information</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.SRecievedId)

        <div class="row">
            <div class="form-group">
                @Html.LabelFor(model => model.SRecieved_Code, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-5">
                    @Html.Editor("SRecieved_Code", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.SRecieved_Code, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group">
                @Html.LabelFor(model => model.SR_Type, htmlAttributes: new { @class = "hidden" })
                @*@Html.LabelFor(model => model.SR_Type, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <div class="col-md-2">
                    @Html.DropDownListFor(Model => Model.SR_Type, new SelectList(ViewBag.list), htmlAttributes: new { @class = "hidden" })
                    @*@Html.DropDownListFor(Model => Model.SR_Type, new SelectList(ViewBag.list), htmlAttributes: new { @class = "form-control" })*@
                    @Html.ValidationMessageFor(model => model.SR_Type, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <div class="row">
            <div class="form-group">
                @Html.LabelFor(model => model.Trans_Date, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.Editor("Trans_Date", new { htmlAttributes = new { @class = "datepicker1" } })
                    @Html.ValidationMessageFor(model => model.Trans_Date, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group">
                @Html.LabelFor(model => model.Airlines_Code, "Airlines", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-5">
                    @Html.DropDownList("Airlines_Code", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Airlines_Code, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group">
                @Html.LabelFor(model => model.From_TicketNo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-5">
                    @Html.EditorFor(model => model.From_TicketNo, new { htmlAttributes = new { @class = "form-control", id = "fromTicket" } })
                    @Html.ValidationMessageFor(model => model.From_TicketNo, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group">
                @Html.LabelFor(model => model.To_TicketNo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-5">
                    @Html.EditorFor(model => model.To_TicketNo, new { htmlAttributes = new { @class = "form-control", id = "toTicket" } })
                    @Html.ValidationMessageFor(model => model.To_TicketNo, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group">
                @Html.LabelFor(model => model.Ticket_Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-5">
                    @Html.EditorFor(model => model.Ticket_Quantity, new { htmlAttributes = new { @class = "form-control", id = "ticketQuantity", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Ticket_Quantity, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        @*<div class="row">
            <div class="form-group">
                @Html.LabelFor(model => model.Customer_Name, "Customer_Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-5">
                    @Html.TextBoxFor(model => model.Customer_Name, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Customer_Name, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>*@

        <div class="row">
            <div class="form-group">
                @Html.LabelFor(model => model.Customer_Code, "Customer_Code", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-5">
                    @Html.TextBoxFor(model => model.Customer_Code, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Customer_Code, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>



        <div class="row">
            <div class="form-group">
                @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.TextAreaFor(model => model.Remarks, 5, 54, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group">
                @Html.LabelFor(model => model.Transaction_Status, htmlAttributes: new { @class = "hidden" })
                @*@Html.LabelFor(model => model.Transaction_Status, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <div class="col-md-2">
                    @Html.DropDownListFor(Model => Model.Transaction_Status, new SelectList(ViewBag.list2), htmlAttributes: new { @class = "hidden" })
                    @*@Html.DropDownListFor(Model => Model.Transaction_Status, new SelectList(ViewBag.list2), htmlAttributes: new { @class = "form-control" })*@
                    @Html.ValidationMessageFor(model => model.Transaction_Status, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group">
                @Html.LabelFor(model => model.Issued, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    @Html.DropDownListFor(Model => Model.Issued, new SelectList(ViewBag.list3), htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Issued, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group">
                @Html.LabelFor(model => model.Entry_Date, htmlAttributes: new { @class = "hidden" })
                <div class="col-md-10">
                    @Html.Editor("Entry_Date", new { htmlAttributes = new { @class = "hidden" } })
                    @Html.ValidationMessageFor(model => model.Entry_Date, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group">
                <div class="col-md-offset-2 col-md-6">
                    <div align="right">
                        <input type="submit" value="Update" class="btn btn-primary" />
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />

@section scripts{
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
    <script>
        $(function () {
            $(function () {
                $(".datepicker1").datepicker({
                    dateFormat: "mm/dd/yy",
                    changemonth: true,
                    changeyear: true,
                    minDate: new Date(2018, 0, 1),
                    maxDate: new Date(2020, 0, 1),
                    showOn: "both",
                    buttonImage: "http://jqueryui.com/resources/demos/datepicker/images/calendar.gif",
                    buttonText: "Calender"
                });
            });
            $(".datepicker2").datepicker({
                dateFormat: "mm/dd/yy",
                changemonth: true,
                changeyear: true,
                minDate: new Date(2018, 0, 1),
                maxDate: new Date(2020, 0, 1),
                showOn: "both",
                buttonImage: "http://jqueryui.com/resources/demos/datepicker/images/calendar.gif",
                buttonText: "Calender"
            });
        });

    </script>
}

<script>
    $(document).ready(function () {
        $('#fromTicket').keyup(function () {
            var input = $('#fromTicket').val().length;
            if (input > 7) {
                swal("Warning!!", "fromTicket number must be 7 digit !", "warning");

            }
            var fromData = $('#fromTicket').val();
            if (fromData === '') {
                $('#toTicket').val('');
                $('#ticketQuantity').val('');
            } else {
                if (!isNaN(fromData)) {
                    $('#toTicket').val(fromData);
                }
                else {
                    $('#toTicket').val(0);
                    $('#ticketQuantity').val(0);
                }
                printResult();
            }
        });
        $('#toTicket').keyup(function () {

            printResult();
        });

    });


    function printResult() {

        //if (toTicket < fromTicket) {
        //    $('#toTicket').val('');
        //    $('#ticketQuantity').val('');

        //}
        var from = $('#fromTicket').val();
        var to = $('#toTicket').val();
        //alert(from);
        if (!isNaN(from) && !isNaN(to) && from <= to) {
            //var diff = to - from;
            //if (diff < 0) {
            //  swal("Warning!!", "toTicket number must be equal or greater then fromTicket number!", "warning");
            //$('#toTicket').val('');
            //$('#ticketQuantity').val(0);

            $('#ticketQuantity').val((to - from) + 1);


        }
        //else {
        //  $('#ticketQuantity').val((to - from) + 1);
        //  }
        //}
        else $('#ticketQuantity').val(0);
    }


</script>




<script type="text/javascript">
    $(document).ready(function () {
        $("#Customer_Code").autocomplete({
            source: function (request, response) {
                $.ajax({

                    url: "/StockRecieveInformation/GetCustomer",
                    type: "POST",
                    dataType: "json",
                    data: { Prefix: request.term },

                    success: function (data) {

                        response($.map(data, function (item) {

                            return {

                                label: item.Customer_Code,
                                value: item.Customer_Code,
                                label: item.Customer_Name,





                            };


                        }))

                    }
                })
            },
            messages: {
                noResults: "",
                results: function (count) {
                    return count + (count > 1 ? ' results' : ' result ') + ' found';
                }
            }
        });
    })
</script>



